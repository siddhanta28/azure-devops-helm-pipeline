rbac:
  create: true
  pspEnabled: true
  pspUseAppArmor: true
  namespaced: false
serviceAccount:
  create: true
  name:

deploymentStrategy: RollingUpdate

readinessProbe:
  httpGet:
    path: /
    port: 3007
  initialDelaySeconds: 20
  timeoutSeconds: 15
  failureThreshold: 3
  periodSeconds: 10

livenessProbe:
  httpGet:
    path: /
    port: 3007
  initialDelaySeconds: 20
  timeoutSeconds: 15
  failureThreshold: 3
  periodSeconds: 10
  
  #exec:
 #   command: 
 #   - touch
  #  - /tmp/healthy
  #initialDelaySeconds: 10
  #timeoutSeconds: 20
  #failureThreshold: 10

image:
  repository: ypaycards.azurecr.io/support-ypay
  tag: 'latest'
  pullPolicy: IfNotPresent

imagepullsecret:
  name: acr-auth

## Pod Annotations
# podAnnotations: {}

## Deployment annotations
# annotations: {}

## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service).
## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
## ref: http://kubernetes.io/docs/user-guide/services/
##
service:
  type: ClusterIP
  port: 80
  targetPort: 3007
    # targetPort: 4181 To be used with a proxy extraContainer
  annotations:
    prometheus.io/scrape: 'true'
  labels:
    tier: frontend

secret:
  enabled: true
  data:
    tls:
      crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdoekNDQlcrZ0F3SUJBZ0lJWHU1dXY2K3hPdDR3RFFZSktvWklodmNOQVFFTEJRQXdnYlF4Q3pBSkJnTlYKQkFZVEFsVlRNUkF3RGdZRFZRUUlFd2RCY21sNmIyNWhNUk13RVFZRFZRUUhFd3BUWTI5MGRITmtZV3hsTVJvdwpHQVlEVlFRS0V4RkhiMFJoWkdSNUxtTnZiU3dnU1c1akxqRXRNQ3NHQTFVRUN4TWthSFIwY0RvdkwyTmxjblJ6CkxtZHZaR0ZrWkhrdVkyOXRMM0psY0c5emFYUnZjbmt2TVRNd01RWURWUVFERXlwSGJ5QkVZV1JrZVNCVFpXTjEKY21VZ1EyVnlkR2xtYVdOaGRHVWdRWFYwYUc5eWFYUjVJQzBnUnpJd0hoY05NalF3TWpJM01USXpNalF3V2hjTgpNalV3TWpJNE1UQXlNak14V2pBV01SUXdFZ1lEVlFRRERBc3FMbmx3WVhrdWRHVmphRENDQVNJd0RRWUpLb1pJCmh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTWNRVjFSdGlsTWQwMTYzZTBaSnlia2dzM3VVVWU0d3hJaE4KQWtBTFg5dmFGSVFMQVovZW1CVDZEQzZQTC9SMWlvQTVFZkFkQm5udVhtbTNNQXN1aG0yeDFyNTVLQ0VFUFVsegpud3d3UkdSaW5xdzY5WkhXUk96dndlUTI2aEZXaCtGS3FyV1RSb0ZjdmZQZ2pBUkRXQVMrSjYxUThQSHhJOVVWCjlJZjhXM056R2dIL2Y3K1BXb1F3U0dTdXRKeDViNVpEUnNZQWhaanNLeHV6bFJXQWgraUJKNVluWThYa2FWUTYKMEdXYlhGZG1QdE5Da0lJclFoT0R4NHdwZ3g2V1dWUXdobnJPTE9DSHJsK3A0SHpBQWZEbjNMdkZ5akJpQzM4YQpXVnd5UjlpL1BHMmFiY0J0NTRlZEVveGMwejBvQTJOOWVpZ0p1L3dGZnpxNHlCdlUzK2tDQXdFQUFhT0NBemd3CmdnTTBNQXdHQTFVZEV3RUIvd1FDTUFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUMKTUE0R0ExVWREd0VCL3dRRUF3SUZvREE1QmdOVkhSOEVNakF3TUM2Z0xLQXFoaWhvZEhSd09pOHZZM0pzTG1kdgpaR0ZrWkhrdVkyOXRMMmRrYVdjeWN6RXRNVGM0TnpJdVkzSnNNRjBHQTFVZElBUldNRlF3U0FZTFlJWklBWWI5CmJRRUhGd0V3T1RBM0JnZ3JCZ0VGQlFjQ0FSWXJhSFIwY0RvdkwyTmxjblJwWm1sallYUmxjeTVuYjJSaFpHUjUKTG1OdmJTOXlaWEJ2YzJsMGIzSjVMekFJQmdabmdRd0JBZ0V3ZGdZSUt3WUJCUVVIQVFFRWFqQm9NQ1FHQ0NzRwpBUVVGQnpBQmhoaG9kSFJ3T2k4dmIyTnpjQzVuYjJSaFpHUjVMbU52YlM4d1FBWUlLd1lCQlFVSE1BS0dOR2gwCmRIQTZMeTlqWlhKMGFXWnBZMkYwWlhNdVoyOWtZV1JrZVM1amIyMHZjbVZ3YjNOcGRHOXllUzluWkdsbk1pNWoKY25Rd0h3WURWUjBqQkJnd0ZvQVVRTUs5SjQ3TU5JTXdvalBYKzJ5ejhMUXNnTTR3SVFZRFZSMFJCQm93R0lJTApLaTU1Y0dGNUxuUmxZMmlDQ1hsd1lYa3VkR1ZqYURBZEJnTlZIUTRFRmdRVWhQMHhXZUlRUHk3clBKN0tBTGQ2CnB1bkRmNWN3Z2dGK0Jnb3JCZ0VFQWRaNUFnUUNCSUlCYmdTQ0FXb0JhQUIxQUU1MW95ZGNtaERET0Z0czFOOC8KVXVzZDhPQ09HNDFwd0xINlpMRmltam5mQUFBQmplcU5pa3dBQUFRREFFWXdSQUlnRENqYXhsS25oWEIxd2VZbgpQOTlLa3U1TUhxb0ZxWTN0b2ZRZ0w2NklpdkFDSUZpVllwQmNSQXBxcStic3RvRVdURDdyQ0tOZFgyb0cwY2FrCkh6b0JIbHRXQUhZQWZWa2VFdUY0S25zY1lXZDhYdjM0MElkY0ZLQk9sWjY1QXkvWkRvd3VlYmdBQUFHTjZvMksKNlFBQUJBTUFSekJGQWlCWDQ5Nk0xZXRvUjNid0Vva09oQmpBdDB0U2oyc213R0J1aWFJQW9Jd3VqQUloQU1GNgp3UHFVMGduWGdHN2p2dVJrYitYRm1FQUh2alk3bjNyd1I3bSsrL2xjQUhjQXpQc1Bhb1Z4Q1dYK2xadFR6dW15CmZDTHBoVndObDQyMnFYNVV3UDVNRGJBQUFBR042bzJMU0FBQUJBTUFTREJHQWlFQXZzOWp3MlBhUFVubTY5ZWsKWTQ5bVJMeXYrZFdUU3crWHVNaHFxbXpWUm04Q0lRQzdhNlhqTnRnRnk5RnFtdnl0c09RZGJKUk15dEtsK3RYVApObUI1NW1EZEV6QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFDSXhiaHVweU5jQ1I4NXFORTMrQXBaMXZDYWNyCjhrYndDeDgvVFlpYnM5MDgzWFdjSTRtRmZUYklzbFdQSVFlREw1NTJoUmdVbExqaTMzdXpuUjdHYlAwTXhHcEIKOTlicWo1Snc5UFZ5TnJLNHUrVXl1WUJQTHVJTXdoampHR1cycDFOMlZZTHd2QnlPakpaOHNVUWZISmtNdWlERAp3aytUc1p5V2Y1MHMwTENtcTdxcXZ1bTdZWTNPRWEyNlhkRnp6QUhLRVQwU0lweld5K2VNSlc5ckJqNjRzRU9lCkhjNTZsZEhkTmxxbHo5WTZ4aENYSTIvZ1QzSUF6d1VCa0tadnVDWENMa0dPWWd4dzhheGtabzBRelh1TUs3MGIKNEpteWJ2RmVLNnRkb0NrclkxemVkbU5zZ3hES2pFTDd2cDNJbDRlVkVBdVlsNHRPc3FMczZDbUJwQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUUwRENDQTdpZ0F3SUJBZ0lCQnpBTkJna3Foa2lHOXcwQkFRc0ZBRENCZ3pFTE1Ba0dBMVVFQmhNQ1ZWTXgKRURBT0JnTlZCQWdUQjBGeWFYcHZibUV4RXpBUkJnTlZCQWNUQ2xOamIzUjBjMlJoYkdVeEdqQVlCZ05WQkFvVApFVWR2UkdGa1pIa3VZMjl0TENCSmJtTXVNVEV3THdZRFZRUURFeWhIYnlCRVlXUmtlU0JTYjI5MElFTmxjblJwClptbGpZWFJsSUVGMWRHaHZjbWwwZVNBdElFY3lNQjRYRFRFeE1EVXdNekEzTURBd01Gb1hEVE14TURVd016QTMKTURBd01Gb3dnYlF4Q3pBSkJnTlZCQVlUQWxWVE1SQXdEZ1lEVlFRSUV3ZEJjbWw2YjI1aE1STXdFUVlEVlFRSApFd3BUWTI5MGRITmtZV3hsTVJvd0dBWURWUVFLRXhGSGIwUmhaR1I1TG1OdmJTd2dTVzVqTGpFdE1Dc0dBMVVFCkN4TWthSFIwY0RvdkwyTmxjblJ6TG1kdlpHRmtaSGt1WTI5dEwzSmxjRzl6YVhSdmNua3ZNVE13TVFZRFZRUUQKRXlwSGJ5QkVZV1JrZVNCVFpXTjFjbVVnUTJWeWRHbG1hV05oZEdVZ1FYVjBhRzl5YVhSNUlDMGdSekl3Z2dFaQpNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUM1NE1zUTFLOTJ2ZFNUWXVzd1pMaUJDR3pECkJObGlGNDR2L3o1bHo0L09ZdVk4VWh6YUZrVkxWYXQ0YTJPRFlwRE9EMmxzbWNnYUZJdE16RVV6Nm9qY25xT3YKSy82QVlaMTVWOFRQTHZRL01EeGRSL3lhRnJ6RE41WkJVWTRSUzFUNEtMN1FqTDd3TURnZTg3QW0rR1pIWTIzZQpjU1pIanpoSFU5RkdIYlRqM0FEcVJheTl2SEhacW04QTI5dk5NRHA1VDE5TVIvZ2Q3MXZDeEoxZ083R3lRNUhZCnBETk82clBXSjArdEpZcWx4dlRWMEthdWRBVmtWNGkxUkZYVUxTbzZQdmk0dmVreUNnS1VaTVFXT2xEeFNxN24KZVRPdkRDQUhmK2pmQkRuQ2FRSnNZMUw2ZDhFYnlIU0h5TG1UR0ZCVU5VdHBUcnc3MDBrdUg5ekIwbEw3QWdNQgpBQUdqZ2dFYU1JSUJGakFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTRHQTFVZER3RUIvd1FFQXdJQkJqQWRCZ05WCkhRNEVGZ1FVUU1LOUo0N01OSU13b2pQWCsyeXo4TFFzZ000d0h3WURWUjBqQkJnd0ZvQVVPcHFGQnhCbktMYnYKOXIwRlFXNGd3WlRhRDk0d05BWUlLd1lCQlFVSEFRRUVLREFtTUNRR0NDc0dBUVVGQnpBQmhoaG9kSFJ3T2k4dgpiMk56Y0M1bmIyUmhaR1I1TG1OdmJTOHdOUVlEVlIwZkJDNHdMREFxb0NpZ0pvWWthSFIwY0RvdkwyTnliQzVuCmIyUmhaR1I1TG1OdmJTOW5aSEp2YjNRdFp6SXVZM0pzTUVZR0ExVWRJQVEvTUQwd093WUVWUjBnQURBek1ERUcKQ0NzR0FRVUZCd0lCRmlWb2RIUndjem92TDJObGNuUnpMbWR2WkdGa1pIa3VZMjl0TDNKbGNHOXphWFJ2Y25rdgpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFJZm15VEVNZzR1SmFwa0V2L29WOVBCTzlzUHB5SUJzbFFqNlp6CjkxY3hHNzY4NUMvYitMclRXK0MwNStaNVlnNE1vdGRxWTNNeHRmV29TS1E3Q0MyaVhaRFh0SHdsVHhGV01NUzIKUkoxN0xKM2xYdWJ2REdHcXYrUXFHKzZFbnJpRGZjRkR6a1NuRTNBTmtSLzB5Qk90ZzJEWjJIS29jeVFldGF3aQpEc29YaVdKWVJCdXJpU1VCQUEvTnhCdGkyMUcwMHc5UktwdjB2SFA4ZHM0MnBNM1oyQ3pxcnB2MUtyS1EwVTExCkdJby9pa0dRSTMxYlMvNmtBMWliUnJMRFlHQ0QrSDFRUWM3Q29aRER1KzhDTDlJVlZPNUVGZGtLcnFlS00rMngKTFhZMkp0d0U2NS8zWVI4VjNJZHY3a2FXS0syaEpuMEtDYWN1QktPTnZQaThCREFCCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVmVENDQTJXZ0F3SUJBZ0lERytjVk1BMEdDU3FHU0liM0RRRUJDd1VBTUdNeEN6QUpCZ05WQkFZVEFsVlQKTVNFd0h3WURWUVFLRXhoVWFHVWdSMjhnUkdGa1pIa2dSM0p2ZFhBc0lFbHVZeTR4TVRBdkJnTlZCQXNUS0VkdgpJRVJoWkdSNUlFTnNZWE56SURJZ1EyVnlkR2xtYVdOaGRHbHZiaUJCZFhSb2IzSnBkSGt3SGhjTk1UUXdNVEF4Ck1EY3dNREF3V2hjTk16RXdOVE13TURjd01EQXdXakNCZ3pFTE1Ba0dBMVVFQmhNQ1ZWTXhFREFPQmdOVkJBZ1QKQjBGeWFYcHZibUV4RXpBUkJnTlZCQWNUQ2xOamIzUjBjMlJoYkdVeEdqQVlCZ05WQkFvVEVVZHZSR0ZrWkhrdQpZMjl0TENCSmJtTXVNVEV3THdZRFZRUURFeWhIYnlCRVlXUmtlU0JTYjI5MElFTmxjblJwWm1sallYUmxJRUYxCmRHaHZjbWwwZVNBdElFY3lNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXYzRmkKQ1BINldUVDNHOGtZby9lQVNWanBJb01UcHNVZ1F3RTdoUEhtaFVtZkorcjJoQnRPb0xUYmNKakhNZ0d4QlQ0SApUdTcwK2s4dldUQWk1NnNaVm12aWdBZjg4eFoxZ0RsUmUrWDVOYlowVHFtTmdoUGt0aitwQTRQNm9yNktGV3AvCjNndkR0aGtVQmNycXc2Z0VsRHRHZkRJTjh3Qm1Jc2lOYVcwMmpCRVl0OU95SEdDME9Qb0NqTTdUM1VZSDNnbysKNjExOHlIejdzQ3RUcEpKaWFWRWxCV0VhUklHTUxLbERsaVBmckRxQm1nNHB4UnlwNlYwZXRwNmVNQW81enZHSQpnUHRMWGN3eTdJVmlReVUwQWxZbkFaRzBPM0FxUDI2eDZKeUlBWDJmMVBuYlUyMWduYjhzNTFpcnVGOUcvTTdFCkd3TThDZXRKTVZ4cFJyUGdSd0lEQVFBQm80SUJGekNDQVJNd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBT0JnTlYKSFE4QkFmOEVCQU1DQVFZd0hRWURWUjBPQkJZRUZEcWFoUWNRWnlpMjcvYTlCVUZ1SU1HVTJnL2VNQjhHQTFVZApJd1FZTUJhQUZOTEVzTktSMUV3UmNiTmh5ejJoL3Qyb2F0VGpNRFFHQ0NzR0FRVUZCd0VCQkNnd0pqQWtCZ2dyCkJnRUZCUWN3QVlZWWFIUjBjRG92TDI5amMzQXVaMjlrWVdSa2VTNWpiMjB2TURJR0ExVWRId1FyTUNrd0o2QWwKb0NPR0lXaDBkSEE2THk5amNtd3VaMjlrWVdSa2VTNWpiMjB2WjJSeWIyOTBMbU55YkRCR0JnTlZIU0FFUHpBOQpNRHNHQkZVZElBQXdNekF4QmdnckJnRUZCUWNDQVJZbGFIUjBjSE02THk5alpYSjBjeTVuYjJSaFpHUjVMbU52CmJTOXlaWEJ2YzJsMGIzSjVMekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBV1F0VHZaS0dFYWNrZSsxYk1jOGQKSDJ4d3hiaHV2azY3OXI2WFVPRXdmN29vWEdLVXd1TitNL2Y3UW5hRjI1VWNqQ0pZZFFrTWlHVm5PUW9XQ2NXZwpPSmVreFNPVFA3UVlwZ0VHUkpIanAya250Rm9sZnpxM01zM2RoUDhxT0NrenBOMW5zb1grb1lnZ0hGQ0p5TndxCjlrSUROMHptaU4vVnJ5VHlzY1BmekxYczRKbGV0MGxVSUR5VUdBekhIRklZU2FSdDRiTllDOG5ZN05tdUhES08KS0hBTjR2Nm1GNTZFRDcxWGNMTmE2UitnaGxPNzczei9hUXZnU01PM2t3dklDbFRFckYwVVp6ZHN5cVV2TVFnMwpxbTV2akx5YjRsZGRKSUd2bDVlY2hLMXNyRGRNWnZOaGtSRWc1TDR3bjNxa0tRbXc0VFJmWkhjWVFGSGZqRENtCnJ3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRUFEQ0NBdWlnQXdJQkFnSUJBREFOQmdrcWhraUc5dzBCQVFVRkFEQmpNUXN3Q1FZRFZRUUdFd0pWVXpFaApNQjhHQTFVRUNoTVlWR2hsSUVkdklFUmhaR1I1SUVkeWIzVndMQ0JKYm1NdU1URXdMd1lEVlFRTEV5aEhieUJFCllXUmtlU0JEYkdGemN5QXlJRU5sY25ScFptbGpZWFJwYjI0Z1FYVjBhRzl5YVhSNU1CNFhEVEEwTURZeU9URTMKTURZeU1Gb1hEVE0wTURZeU9URTNNRFl5TUZvd1l6RUxNQWtHQTFVRUJoTUNWVk14SVRBZkJnTlZCQW9UR0ZSbwpaU0JIYnlCRVlXUmtlU0JIY205MWNDd2dTVzVqTGpFeE1DOEdBMVVFQ3hNb1IyOGdSR0ZrWkhrZ1EyeGhjM01nCk1pQkRaWEowYVdacFkyRjBhVzl1SUVGMWRHaHZjbWwwZVRDQ0FTQXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRU4KQURDQ0FRZ0NnZ0VCQU42ZDErcFhHRW1oVyt2WFgwaUc2cjdkLytUdlp4ejBaV2l6VjNHZ1huZTc3WnRKNlhDQQpQVllZWXdodjJ2TE0wRDkvQWxRaVZCRFlzb0hVd0hVOVMzL0hkOE0rZUtzYUE3VWdheTlxSzdIRmlIN0V1eDZ3CndkaEZKMitxTjFqM2h5YlgyQzMycVJlM0gzSTJUcVlYUDJXWWt0c3FibDJpL29qZ0M5NS81WTBWNGV2TE90WGkKRXFJVExkaU9yMThTUGFBSUJRaTJYS1ZsT0FSRm1SNmpZR0IweFVHbGNtSWJZc1VmYjE4YVFyNENVV1dvcmlNWQphdng0QTZsTmY0REQrcXRhL0tGQXBNb1pGdjZ5eU85ZWN3M3VkNzJhOW5tWXZMRUhaNklWRGQyZ1dNWkVld28rCllpaGZ1a0VIVTFqUEVYNDRkTVg0LzdWcGtJK0VkT3FYRzY4Q0FRT2pnY0F3Z2Iwd0hRWURWUjBPQkJZRUZOTEUKc05LUjFFd1JjYk5oeXoyaC90Mm9hdFRqTUlHTkJnTlZIU01FZ1lVd2dZS0FGTkxFc05LUjFFd1JjYk5oeXoyaAovdDJvYXRUam9XZWtaVEJqTVFzd0NRWURWUVFHRXdKVlV6RWhNQjhHQTFVRUNoTVlWR2hsSUVkdklFUmhaR1I1CklFZHliM1Z3TENCSmJtTXVNVEV3THdZRFZRUUxFeWhIYnlCRVlXUmtlU0JEYkdGemN5QXlJRU5sY25ScFptbGoKWVhScGIyNGdRWFYwYUc5eWFYUjVnZ0VBTUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVGQlFBRApnZ0VCQURKTDg3TEtQcEg4RXNhaEI0eU9kNkF6QmhSY2tCNFk5d2ltUFFvWitZZUFFVzVwNUpZWE1QODBrV055Ck9PN01IQUdqSFpRb3BESDJlc1JVMS9ibE1WZ0Rvc3pPWXR1VVJYTzF2MFhKSkxYVmdnS3RJM2xwamJpMlRjN1AKVE1vekkrZ2NpS3FkaTBGdUZza2c1WW1lelR2YWNQZCttU1lnRkZRbHEyNXpoZWFiSVowS2JJSU9xUGpDRFBvUQpIbXlXNzRjTnhBOWhpNjN1Z3l1VitJNlNoSEk1NnlEcWcrMkR6WmR1Q0x6clRpYTJjeXZrMC9aTS9pWng0bUVSCmRFci9WeHFIRDNWSUxzOVJhUmVnQWhKaGxkWFJRTElRVE83RXJCQkRwcVdlQ3RXVllwb056NGlDeFRJTTVDdWYKUmVZTm55aWNzYmtxV2xldE53K3ZIWC9idlo4PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRREhFRmRVYllwVEhkTmUKdDN0R1NjbTVJTE43bEZIdU1NU0lUUUpBQzEvYjJoU0VDd0dmM3BnVStnd3VqeS8wZFlxQU9SSHdIUVo1N2w1cAp0ekFMTG9adHNkYStlU2doQkQxSmM1OE1NRVJrWXA2c092V1Ixa1RzNzhIa051b1JWb2ZoU3FxMWswYUJYTDN6CjRJd0VRMWdFdmlldFVQRHg4U1BWRmZTSC9GdHpjeG9CLzMrL2oxcUVNRWhrcnJTY2VXK1dRMGJHQUlXWTdDc2IKczVVVmdJZm9nU2VXSjJQRjVHbFVPdEJsbTF4WFpqN1RRcENDSzBJVGc4ZU1LWU1lbGxsVU1JWjZ6aXpnaDY1ZgpxZUI4d0FIdzU5eTd4Y293WWd0L0dsbGNNa2ZZdnp4dG1tM0FiZWVIblJLTVhOTTlLQU5qZlhvb0NidjhCWDg2CnVNZ2IxTi9wQWdNQkFBRUNnZ0VBUGhzMEUreEZMdDlzVmUzSzhVZ09Qc3NjRkY5WEhJaHNtTlhsOE5OYnFmMGwKVDNrYm5hUldNSjArOWJ2SXkyMXNzOHFhZFI2cEtadWNLMEZ6Sk5uMEtQOUdMNUVmV3dXMmxWY1VkVG9ON0gvMApYMm5adWhGdTJibUg5Y3JJUm5hSDJGdHlYVXBBd2hXTVVpMXBvZDdjOUVYYm5UQldyRFYrNTNsOUhIdzRrQkQ1ClVtdzNBeDlhR1V4YmtDWnVOTzFJbXF5cHEyclVjNXVTYytNU3lydDdFNm04cHNEcGhOeCsrcmJjQklaQmF1N3oKK1ozVnpKcjZTN3czeXFxZXdQeHc3UFgra2ZpZHY4LzFGdUtpZkdTNDVNdVlLWk9vQnZoYnpab0dndzBKdnplcAo5Y0FMa0dlZy9BVnN3KytTcjFjeW9hMVU2Sm9IdFFNeklUU29TYlpoL1FLQmdRRG5Ja3Bic05EbkJTM1VpdENQCjRWTlZlMUpUczhpdHl4cEs5VjRYbElId3FwN29nbXl1Um1LelliVUU2RkJ1QjUzbGR4RnBCUHFVT0h2TUx1dnUKNkVGQjRXaTViRjVjcXk4ZXBPaHYzbEVhdHNXWVJNWkMrbHF0Q2tQemYyOGxrSEViWlE1dWJhZWQzYVJJWUl3NApNQ0d6VTFuYzNOQy9ERTdLTlIrdGZWemZLd0tCZ1FEY2Vzei90UkhsTlc5eFFNVnBZeUE1TGt0SE94UG1NbHRGCmJxVFZxUzVMaDhydURZbU5KZnk4WjdhbTVwSkl1dUFqZDFhUE1DZ0VNc1FnNDMwOUlIZy8xVnBSWlNMN0FtNFkKN1hRSkdnclRiUndpRWR6S0pna2pISHdaMmZhZWtTZXFNd0N4cDdKTStVSEk5dmFGZ1RhZHJWcjczQXRTdGlqZApRYktUaS9mVE93S0JnSGFzRzRPaWNFLzlUNyt1R2xHVmZvVUlVWWZhYWpJWmN3R0RvL0QxZGhZTWRKU3F5b1JjCmJUYnU5dE56T0VDV05wTG5wSS9JVjZRY3NDdHcrQUJ0VFh3MjhOOHJiZk9ralFmdDRjMzJWcXdocGFoOXYxSUsKV3Q0M3hCWFVtMHV0TXZXKzJEOEluQ1FvOWIyWG5NY0lwM1Q4V2NwVnNmUTFySXFUNWhUY3BmK0xBb0dCQUxOVgo0NGNlaGliVkZ3ZWNzclp0SFpuRk1SQUlXc0JFTjM4N1p6SXZnV3VJVWFUZU9BTXFZZS94d0Z6emNRdGRqZERyClVlbjROcVJya3FKWng5Vy9vbS94bjV4VFVtZXZhMVExV012S2RnSFJYeS9MTGJienh6emEvNHFiZ3dFcGVvVHoKSlY1YjFDak9HaGRYNGQ5bjRiL1JjUThweGNBS1VTVGZPbHpQWGM1ZkFvR0FJZHEvWDVpT2h1enJweUhkL3ZjLwp2NFZMc2xiME1seFplQnpBOGRGcFB0b3Y0UVBUcWFWRUoydmJZRi9IdkI4T09vUkpEWGVrdDBUVnl3bW42VGR4CjlQTHNETm42eG9yZmFxb2gzbk9zeThkOHY5akpzcjF2a0NWY1pWMkNaeXgxV2Y0TElqb0E1U09hU3lwa3cvc2IKd3U3M3NGbUxaWHNsdXUzak12YVozaEE9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0=


ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
  labels: {}
  path: /
  hosts:
    - supportapi.ypay.tech
  pathType: Prefix
  tls:
    - secretName: support-ypay-tls
      hosts:
        - supportapi.ypay.tech

resources:
 limits:
   cpu: 250m
   memory: 250Mi
 requests:
   cpu: 200m
   memory: 200Mi

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 85
  targetMemoryUtilizationPercentage: 85
  requestspersecond: 2k

env:
  ContentRootPath: "/app"
  ENV_NAME: production
#  NODE_ENV: production